//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include "keys_sv.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define DIG  2
#define SYS  3
#define QUICK_TAP_MS 175

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumb cluster for both hands

// proper urob's home row, uncomment it if you are not going to use visual editor
//#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
//    ZMK_HOLD_TAP(NAME, \
//        flavor = "balanced"; \
//        tapping-term-ms = <280>; \
//        quick-tap-ms = <QUICK_TAP_MS>; \
//        require-prior-idle-ms = <150>; \
//        bindings = <HOLD>, <TAP>; \
//        hold-trigger-key-positions = <TRIGGER_POS>; \
//        hold-trigger-on-release; \
//    )
//
//MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
//MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
//MAKE_HRM(hml_layer, &mo, &kp, KEYS_R THUMBS) // switch layer like HRM

&mt {
    quick-tap-ms = <60>;
    global-quick-tap;
    flavor = "balanced";
    tapping-term-ms = <120>;
    require-prior-idle-ms = <40>;
};

&lt {
    require-prior-idle-ms = <40>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        opt_backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <16 17 18>;
            timeout-ms = <70>;
            require-prior-idle-ms = <250>;
        };

        caps-words {
            bindings = <&caps_word>;
            key-positions = <11 12 13>;
            require-prior-idle-ms = <600>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <18 19 31 28>;
            require-prior-idle-ms = <600>;
            timeout-ms = <60>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        tmux_1: tmux_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp SV_N1>, <&macro_tap>;

            label = "TMUX_1";
        };

        tmux_2: tmux_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp SV_N2>, <&macro_tap>;

            label = "TMUX_2";
        };

        tmux_3: tmux_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp SV_N3>, <&macro_tap>;

            label = "TMUX_3";
        };
    };

    behaviors {
        // this is homerow mod that works identical to urob's one, but this one allows visual editor to understand

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <40>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_R THUMBS 12 11 10>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <40>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS 17 18 19>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <120>;
            require-prior-idle-ms = <40>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS 17 18 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Colemak-DH {
            bindings = <
           &kp Q         &kp W            &kp F              &kp P      &kp B        &kp J      &kp L         &kp U                     &kp Y                      &kp SV_A_RING
           &hml LCTRL A  &hml LEFT_ALT R  &hml LEFT_SHIFT S  &lt 3 T    &kp G        &kp M      &kp N         &hmr RIGHT_SHIFT E        &hmr LEFT_ALT I            &hmr RCTRL O
&lt 4 TAB  &kp Z         &kp X            &kp C              &kp D      &kp V        &kp K      &kp H         &mt SV_O_UMLAUT SV_COMMA  &mt SV_A_UMLAUT SV_PERIOD  &kp SV_SLASH   &mt SV_SEMICOLON SV_COLON
                                          &mo 2              &lt 1 ESC  &kp SPACE    &kp ENTER  &lt 1 ESCAPE  &kp BACKSPACE
            >;
        };

        SpecialCharacters {
            bindings = <
        &kp SV_AT            &kp SV_EXCL        &kp SV_DOLLAR            &kp SV_PERCENT    &kp SV_AMPERSAND    &kp SV_EQUAL      &kp SV_ASTERISK      &kp SV_BACKSLASH          &kp SV_QUESTION  &hmr SV_GRAVE SV_ACUTE
        &kp SV_LEFT_BRACKET  &kp SV_LEFT_BRACE  &kp SV_LEFT_PARENTHESIS  &kp SV_LESS_THAN  &kp SV_FSLH         &kp SV_BACKSLASH  &kp SV_GREATER_THAN  &kp SV_RIGHT_PARENTHESIS  &kp SV_RBRC      &kp SV_RBKT
&trans  &kp SV_SECTION       &kp SV_POUND       &kp SV_DOUBLE_QUOTES     &kp SV_SQT        &kp SV_CARET        &kp SV_PLUS       &kp SV_MINUS         &kp SV_UNDER              &kp SV_PIPE      &kp SV_TILDE            &kp DELETE
                                                &trans                   &trans            &trans              &trans            &trans               &trans
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
        &trans  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &trans  &trans    &none   &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &kp PAGE_UP
        &trans  &trans                &trans                &trans  &trans    &none   &kp LEFT          &kp DOWN          &kp UP            &kp RIGHT
&trans  &trans  &trans                &trans                &trans  &trans    &none   &tmux_1           &tmux_2           &tmux_3           &kp PAGE_DOWN  &kp CAPSLOCK
                                      &trans                &trans  &trans    &trans  &trans            &trans
            >;
        };

        Digits {
            label = "Digits";
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp SV_PLUS   &kp N7  &kp N8  &kp N9  &kp SV_SEMICOLON
        &trans  &trans  &trans  &trans  &trans    &kp SV_EQUAL  &kp N4  &kp N5  &kp N6  &kp KP_MULTIPLY
&trans  &trans  &trans  &trans  &trans  &trans    &kp SV_MINUS  &kp N1  &kp N2  &kp N3  &kp SV_PERIOD     &kp SV_SLASH
                        &trans  &trans  &trans    &trans        &kp N0  &trans
            >;
        };

        SimLayer {
            label = "SYSTEM";
            bindings = <
        &kp F1      &kp F2  &kp F3        &kp F4      &kp F5        &kp F6        &kp F7        &kp F8        &kp F9      &kp F10
        &trans      &trans  &trans        &trans      &trans        &kp C_MUTE    &kp C_PP      &trans        &trans      &trans
&trans  &bt BT_CLR  &trans  &out OUT_TOG  &bt BT_PRV  &bt BT_NXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV    &kp C_NEXT  &trans   &trans
                            &trans        &trans      &trans        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2
            >;
        };
    };
};
